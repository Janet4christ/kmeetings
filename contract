payable contract Meeting =
  // ticket definition
  record ticket = 
    { owner    : address,
      quantity : int }

  
  
  // meeting definition
  record meeting =
    { name        : string,
      date        : string,
      time        : string,
      capacity    : int,
      address1    : string,
      address2    : string,
      image       : string,
      ticketPrice : int,
      opened      : bool,
      tickets     : map(address, ticket) }
      
  
  
  record state = 
    { meetings       : map(int, meeting),
      meetingsLength : int }


  // 1, primer meetup, hoy, ahora, 12, 1, imagen, direccion 1, direccion 2d
  // 2, segundo meetup, manana, despues, 23, 2, imagen, dir1, dir2

  
  
  /**
   * Init method
   */
  entrypoint init() = { meetings = {}, meetingsLength = 0 }

  
  
  /**
   * get meeting by id
   */
  entrypoint getMeeting(meetingId: int) : meeting = 
    state.meetings[meetingId]



  /**
   * get meetings length
   */
  entrypoint getMeetingLength() = state.meetingsLength
  
  
  /**
   * create meeting    
   */
  stateful entrypoint createMeeting(meetingId: int, name': string, date': string,
                                    time': string, capacity': int, ticketPrice': int,
                                    image': string, address1': string, address2': string) =
    // 1, primer meetup, hoy, ahora, 12, 1, imagen, direccion 1, direccion 2d
    // 2, segundo meetup, manana, despues, 23, 2, imagen, dir1, dir2
    // meeting values
    let meeting = 
      { name = name',
        date = date', 
        time = time', 
        capacity = capacity', 
        ticketPrice = ticketPrice',
        image = image',
        address1 = address1', 
        address2 = address2', 
        opened = false,
        tickets = {} }
    // save meeting in blockchain
    put(state{ meetings[meetingId] = meeting })
    
  
  
  /**
   * buy many tickets
   */
  payable stateful entrypoint buyTicket(meetingId: int, quantity': int) =
    let meeting = getMeeting(meetingId)
    
    // validate meeting is opened
    if (!meeting.opened) abort("El evento ha finalizado o est√° cerrado")
    
    let total = meeting.ticketPrice * quantity'
    
    // validate has money to buy
    if (Call.value < total) abort("No ha enviado el monto suficiente para el total de entradas")
    
    // validate meeting has tickets availables
    if (meeting.capacity < quantity') abort("No puede comprar mas de la cantidad disponible")
    
    let updatedCapacity = meeting.capacity - quantity'
    
    let updatedStatus = updatedCapacity != 0
    
    let tickets = meeting.tickets
    let ownTicketQty = switch(Map.lookup(Call.caller, tickets))
      None => 0
      Some(tkt) => tkt.quantity
    
    let updatedQty = meeting.capacity - quantity'
    let updatedStatus = updatedQty != 0
    
    let ticket =
      { owner = Call.caller,
        quantity = ownTicketQty + quantity' }
        
    let updatedTickets = tickets{ [Call.caller] = ticket }
    
    let updatedMeeting = meeting{ tickets = updatedTickets, capacity = updatedCapacity, opened = updatedStatus }
    
    let updatedMeetings = state.meetings{ [meetingId] = updatedMeeting }
    
    // update state
    put(state{ meetings = updatedMeetings })

   
   
   
   
  /**
   * open meeting
   */
  stateful entrypoint openMeeting(meetingId: int) =
    let meeting = getMeeting(meetingId)
    let updatedMeetings = state.meetings{ [meetingId].opened = true }
    put(state{ meetings = updatedMeetings })
    
  
  
  
  /**
   * close meeting
   */
  stateful entrypoint closeMeeting(meetingId: int) =
    let meeting = getMeeting(meetingId)
    let updatedMeetings = state.meetings{ [meetingId].opened = false }
    put(state{ meetings = updatedMeetings })